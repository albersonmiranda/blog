---
title: "Python from R I: package importing (and why learning new languages sucks)"
date: '2021-06-12'
categories: [python]
image: "img/r-python.jpg"
---

```{r, include = FALSE}
library(reticulate)
py_install("pandas")
```

::: {.callout-tip}
# TL;DR

When learning a new programming language, simply finding equivalent code for the practices you already have may be misleading. Here we're able to see that an equivalent of R's `library()` call is actually considered a bad practice in Python and if you do that in a job interview, you should not expect they call you back.
:::

# Motivation

It crossed my mind an analogy about learning a foreign language: *it's impossible to learn a new language by translating word by word*. It's not only a matter of vocabulary. I mean, each language has it's own grammar, phrasal verbs, diction, expressions, pace etc. That kind of issue also appears when learning a new *programming language* and I think importing packages is a good, yet very simple, example of that.

# Calling A Function From A Package

## R Experience

In R, every package installed in the library trees are listed whenever a terminal is open. Those listed packages are available for users at all times and can be called explicitly. For example:

### Case 1: Explicit Call
```{r mlr3 example}

# search for machine learning measures that contais "AUC" in the {mlr3} package
mlr3::mlr_measures$keys("auc")
```

But that way of calling functions usually take place only if that particular package won't be required very often. Otherwise, it's cultural for R users to load and attach the entire package's namespace to the search path^[An ordered list where R will look for a function. Can be accessed with `search()`.] with a `library()` call.

### Case 2: Attaching
```{r ggplot example}

# tired: explicitly calling from {ggplot2}
t1 = mtcars |>
  dplyr::mutate(hp_by_cyl = hp / cyl)

# wired: attaching {ggplot2} namespace
library(dplyr)

t2 = mtcars |>
  mutate(hp_by_cyl = hp / cyl)

# are they equivalent?
all.equal(t1, t2)
```

The problem appears when there are namespace conflicts. Did you notice the warning about objects being masked from {stats} and {base}?. Usually, users just don't care for startup warnings `r emo::ji("fearful_face")` and that may eventually lead them to inconsistent results or tricky errors.

That can be avoided by attaching only the specific functions you're actually gonna use:

### Case 3: Attaching Specific Functions

```{r plotly example 2}

# detaching dplyr
detach("package:dplyr")

# attaching only mutate():
library(dplyr, include.only = "mutate")
```

And no conflict warning will be triggered. Unfortunately, I don't hear much of `include.only` argument from R community `r emo::ji("man_shrugging")`. On the contrary, meta packages such as {tidyverse}, which will load and attach A LOT of stuff into the namespace — often unnecessary for what you're about to do —, is quite common.

## Python Experience

All of the 3 cases stated before are possible in Python, but the community standards are very different. Specially regarding to the awareness of what is loaded into the namespace — or symbol table, as it is called in Python^[I guess? I don't know, still learning lol `r emo::ji("face_with_tears_of_joy")`].

Firstly, installed packages aren't immediately available. So if I try, for example, listing {pandas} functions/methods/attributes it'll result in an error:

```{python pandas example 1 py}
# inspecting modules in {pandas}
import pandas
dir(pandas)
```

One can check the symbol table with the following statement.

```{python globals py}

# what is attached into the symbol table?
print(*globals(), sep = "\n")
```

Depending on what system/tools you're using, Python interpreter will load a few modules or not. If you start a REPL — a Python interactive terminal —, no modules will be leaded. If you start a Jupyter notebook, a few modules necessary for it to run will be loaded. In this case, since I'm running Python from R via {reticulate}, some modules have been loaded:

- `sys`: for accesses to some variables and functions used by the interpreter
- `os`: for OS routines for NT or Posix

So if I want to work with {pandas}, I need to attach it to the symbol table with an equivalent to R's `library()`. And just like it's cousin function, Python's `import` also comes in different flavours.

Firstly, `import pandas` will make the package available for explicit calls. 

```{python import example 2 py}

# import pandas
import pandas

# what is attached into the symbol table?
print(*globals(), sep = "\n")
```

Note that only {pandas} is attached to the symbol table, not it's functions/methods/attributes. So that statement it's not an equivalent to `library()`. For us to create a simple dataframe with {pandas}:

### Case 1: Explicit Call {#Case1py}

```{python dataframe py}
#| error: true

# this will result in a NameError: name 'DataFrame' is not defined
DataFrame(
  {
    "capital": ["Vitoria", "São Paulo", "Rio de Janeiro"],
    "state": ["Espírito Santo", "São Paulo", "Rio de Janeiro"]
  }
)

# this will work
pandas.DataFrame(
  {
    "capital": ["Vitoria", "São Paulo", "Rio de Janeiro"],
    "state": ["Espírito Santo", "São Paulo", "Rio de Janeiro"]
  }
)
```

If we were to replicate `library()` behavior (i.e. load and attach the entire {pandas} functions/methods/attributes into the symbol table), then:

### Case 2: Attaching {#Case2py}

```{python case 2 python py}

# importing entire {pandas} into symbol table
from pandas import *

# the updated symbol table
print(*globals(), sep = "\n")

# and now this works
DataFrame(
  {
    "capital": ["Vitoria", "São Paulo", "Rio de Janeiro"],
    "state": ["Espírito Santo", "São Paulo", "Rio de Janeiro"]
  }
)
```

But you won't see any experienced Python user doing that kind of thing because they're worried about loading that amount of names into the symbol table and the possible conflicts it may cause. An acceptable approach would be attaching only a few frequent names as in:

### Case 3: Attaching Specific Functions {#Case3py}

```{python case 3 python py}
#| error: true

# detaching {pandas}
for name in vars(pandas):
    if not name.startswith('_'):
        del globals()[name]

# attaching only DataFrame()
from pandas import DataFrame

# the updated symbol table
print(*globals(), sep = "\n")
```

According to The Hitchhiker's Guide to Python [@pythonguide], [case 2](#case2py) is the worst possible scenario and it's generally considered bad practice since it "makes code harder to read and makes dependencies less compartmentalized". That claim is endorsed by Python's official docs [@pythontutorial]:

> Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practice in production code" .

In the opinion of the guide authors, [case 3](#case3py) would be a better option because it pinpoints specific names^[Python Foundation says "There is nothing wrong with using from package import specific_submodule! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages."], while [case 1](#case1py) would be the best practice, for "Being able to tell immediately where a class or function comes from greatly improves code readability and understandability in all but the simplest single file projects."
